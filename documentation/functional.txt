Here is the detailed Functional Requirement Document (FRD) based on the provided Business Requirement Document (BRD):

**FR-ETL-001: Load Raw Data to Bronze Layer**

* **Title**: Load Raw Customer and Order Data to Bronze Layer
* **Description**: The system must load raw Customer and Order data from CSV files stored in Unity Catalog Volumes to the Bronze layer using Delta Live Tables (DLT) syntax and Auto Loader.
* **Preconditions**:
	+ Unity Catalog Volumes contain CSV files for Customer and Order data.
	+ Catalog "bronzezone", schema "data" exist or can be created.
* **Main Flow / Functional Steps**:
	1. Create catalog "bronzezone", schema "data" if they do not exist.
	2. Ingest CSV data using DLT syntax and Auto Loader (cloud_files with format="csv") for Customer and Order data.
	3. Load data into separate raw tables: "customer_raw" and "orders_raw" with SCD type-2, keeping history, using watermark columns, and creating CreateDateTime, UpdateDateTime, and IsActive flag.
	4. Write upsert script to update records when changes are detected, expiring old records by setting IsActive = 'N' and putting IsActive = 'Y' for new records, and updating UpdateDateTime.

**FR-ETL-002: Load Data to Silver Layer**

* **Title**: Load Data to Silver Layer with Data Cleansing and Transformation
* **Description**: The system must load data from Bronze layer to Silver layer, performing data cleansing and transformation using DLT syntax and Auto Loader.
* **Preconditions**:
	+ Bronze layer contains "customer_raw" and "orders_raw" tables.
	+ Catalog "silverzone", schema "data" exist or can be created.
* **Main Flow / Functional Steps**:
	1. Load data from "customer_raw" and "orders_raw" tables in Bronze layer using DLT syntax and Auto Loader.
	2. Join the two datasets on the "id" column.
	3. Remove records with Null values.
	4. Remove duplicate records.
	5. Apply SCD type 2 using "id" as primary key, keeping history, using watermark columns, and creating CreateDateTime, UpdateDateTime, and IsActive flag.
	6. Write upsert script to update records when changes are detected, expiring old records by setting IsActive = 'N' and putting IsActive = 'Y' for new records, and updating UpdateDateTime.
	7. Load transformed data into "customer_order_combined" table in Silver layer.

**FR-ETL-003: Load Data to Gold Layer with Aggregation**

* **Title**: Load Data to Gold Layer with Aggregation and Curation
* **Description**: The system must load data from Silver layer to Gold layer, performing aggregation and curation using DLT syntax and Auto Loader.
* **Preconditions**:
	+ Silver layer contains "customer_order_combined" table.
	+ Catalog "goldzone", schema "data" exist or can be created.
* **Main Flow / Functional Steps**:
	1. Load data from "customer_order_combined" table in Silver layer using DLT syntax and Auto Loader.
	2. Group data by "age" or "email domain".
	3. Aggregate metrics: Total revenue and Average order amount.
	4. Create CreateDateTime, UpdateDateTime, and IsActive flag.
	5. Write upsert script to update records when changes are detected, expiring old records by setting IsActive = 'N' and putting IsActive = 'Y' for new records, and updating UpdateDateTime.
	6. Load aggregated data into "customer_order_summary" table in Gold layer.

**FR-ETL-004: Manage Unity Catalog Objects and ACL**

* **Title**: Manage Unity Catalog Objects and ACL
* **Description**: The system must create and manage Unity Catalog objects and ACLs for the ETL pipeline.
* **Preconditions**:
	+ Unity Catalog is set up and configured.
* **Main Flow / Functional Steps**:
	1. Create catalogs, schemas, and tables as required for the ETL pipeline.
	2. Provide separate ACL code to manage Unity Catalog objects.

**FR-ETL-005: Enable Real-time Streaming Ingestion and Incremental Load**

* **Title**: Enable Real-time Streaming Ingestion and Incremental Load
* **Description**: The system must enable real-time streaming ingestion and incremental load for the ETL pipeline.
* **Preconditions**:
	+ Auto Loader is configured and enabled.
* **Main Flow / Functional Steps**:
	1. Enable real-time streaming ingestion using Auto Loader.
	2. Configure incremental load to ingest only new or changed records during reruns.
	3. Use Auto Loader checkpointing to handle version-aware ingestion.